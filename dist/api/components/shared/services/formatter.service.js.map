{"version":3,"file":"formatter.service.js","sourceRoot":"","sources":["../../../../../src/api/components/shared/services/formatter.service.ts"],"names":[],"mappings":"AASA,MAAM,OAAO,SAAS;IAkCV,iBAAiB,CAAC,KAAsB,EAAE,MAAc;QAC5D,MAAM,gBAAgB,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAC7D,OAAO,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,gBAAgB,EAAE,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC;IACrE,CAAC;IAEO,EAAE,CAAC,MAAe,EAAE,KAAsB;QAC9C,MAAM,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;QACvE,MAAM,WAAW,GAAG,iBAAiB,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;QACzE,OAAO,EAAE,KAAK,EAAE,WAAW,EAAE,MAAM,EAAE,MAAM,CAAC,OAAO,CAAC,MAAM,EAAE,CAAA;IAChE,CAAC;IAED;;;;MAIE;IACK,GAAG,CAAC,KAAsB;QAC7B,MAAM,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC;QACpC,OAAO,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IAClC,CAAC;IAED;;;;MAIE;IACK,GAAG,CAAC,KAAsB;QAC7B,MAAM,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC;QACpC,OAAO,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IAClC,CAAC;IAED;;;;MAIE;IACK,IAAI,CAAC,KAAsB;QAC9B,MAAM,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC;QACrC,OAAO,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IAClC,CAAC;IAED;;;;MAIE;IACK,WAAW,CAAC,KAAsB;QACrC,MAAM,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,UAAU,CAAC;QAC3C,OAAO,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IAClC,CAAC;IAED;;;;MAIE;IACK,IAAI,CAAC,KAAsB;QAC9B,MAAM,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC;QACpC,OAAO,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IAClC,CAAC;IAED;;;;;;;;;;;;;;;OAeG;IACI,OAAO,CAAC,KAAsB,EAAE,MAAe;QAClD,OAAO,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IAClC,CAAC;;AAhHM,gBAAM,GAAG;IACZ,GAAG,EAAE;QACD,MAAM,EAAE,CAAC;QACT,KAAK,EAAE,kBAAkB;QACzB,IAAI,EAAE,OAAO;QACb,OAAO,EAAE,WAAW;KACvB;IACD,GAAG,EAAE;QACD,MAAM,EAAE,EAAE;QACV,KAAK,EAAE,gCAAgC;QACvC,IAAI,EAAE,aAAa;QACnB,OAAO,EAAE,gBAAgB;KAC5B;IACD,IAAI,EAAE;QACF,MAAM,EAAE,EAAE;QACV,KAAK,EAAE,uCAAuC;QAC9C,IAAI,EAAE,gBAAgB;QACtB,OAAO,EAAE,oBAAoB;KAChC;IACD,GAAG,EAAE;QACD,MAAM,EAAE,CAAC;QACT,KAAK,EAAE,kBAAkB;QACzB,IAAI,EAAE,OAAO;QACb,OAAO,EAAE,YAAY;KACxB;IACD,UAAU,EAAE;QACR,MAAM,EAAE,EAAE;QACV,KAAK,EAAE,yBAAyB;QAChC,IAAI,EAAE,YAAY;QAClB,OAAO,EAAE,iBAAiB;KAC7B;CACJ,CAAA","sourcesContent":["export interface IConfig {\r\n    length: number;\r\n    regex: RegExp;\r\n    mask: string;\r\n    example: string;\r\n}\r\n\r\nexport interface IReturn { value: string; length: number }\r\n\r\nexport class Formatter {\r\n    static config = {\r\n        cep: {\r\n            length: 8,\r\n            regex: /^(\\d{5})(\\d{3})$/,\r\n            mask: '$1-$2',\r\n            example: '00000-000'\r\n        },\r\n        cpf: {\r\n            length: 11,\r\n            regex: /^(\\d{3})(\\d{3})(\\d{3})(\\d{2})$/,\r\n            mask: '$1.$2.$3-$4',\r\n            example: '000.000.000-00'\r\n        },\r\n        cnpj: {\r\n            length: 14,\r\n            regex: /^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/,\r\n            mask: '$1.$2.$3/$4-$5',\r\n            example: '00.000.000/0000-00'\r\n        },\r\n        cel: {\r\n            length: 9,\r\n            regex: /^(\\d{5})(\\d{4})$/,\r\n            mask: '$1-$2',\r\n            example: '00000-0000'\r\n        },\r\n        celWithDDD: {\r\n            length: 11,\r\n            regex: /^(\\d{2})(\\d{5})(\\d{4})$/,\r\n            mask: '($1) $2-$3',\r\n            example: '(00) 00000-0000'\r\n        }\r\n    }\r\n\r\n    private leadingZerosValue(value: number | string, length: number): string {\r\n        const unformattedValue = value.toString().replace(/\\D/g, '');\r\n        return `${'0'.repeat(length)}${unformattedValue}`.slice(-length);\r\n    }\r\n\r\n    private fn(config: IConfig, value: string | number): IReturn {\r\n        const leadingZerosValue = this.leadingZerosValue(value, config.length);\r\n        const maskedValue = leadingZerosValue.replace(config.regex, config.mask);\r\n        return { value: maskedValue, length: config.example.length }\r\n    }\r\n\r\n    /**\r\n     * Fomatter CEP.\r\n     * @param {string | number} value - cep Ex: 00000000\r\n     * @return {string} Ex: 00000-000\r\n    */\r\n    public cep(value: string | number): IReturn {\r\n        const config = Formatter.config.cep;\r\n        return this.fn(config, value);\r\n    }\r\n\r\n    /**\r\n     * Fomatter CPF.\r\n     * @param {string | number} value - cep Ex: 000000000000\r\n     * @return {string} Ex: 000.000.000-00\r\n    */\r\n    public cpf(value: string | number): IReturn {\r\n        const config = Formatter.config.cpf;\r\n        return this.fn(config, value);\r\n    }\r\n\r\n    /**\r\n     * Fomatter CNPJ.\r\n     * @param {string | number} value - cep Ex: 00000000000000\r\n     * @return {string} Ex: 00.000.000/0000-00\r\n    */\r\n    public cnpj(value: string | number): IReturn {\r\n        const config = Formatter.config.cnpj;\r\n        return this.fn(config, value);\r\n    }\r\n\r\n    /**\r\n     * Fomatter Cel with DDD.\r\n     * @param {string | number} value - cep Ex: 00000000000\r\n     * @return {string} Ex: (00) 00000-0000\r\n    */\r\n    public cellWithDDD(value: string | number): IReturn {\r\n        const config = Formatter.config.celWithDDD;\r\n        return this.fn(config, value);\r\n    }\r\n\r\n    /**\r\n     * cell.\r\n     * @param {string | number} value - cep Ex: 000000000\r\n     * @return {string} Ex: 00000-0000\r\n    */\r\n    public cell(value: string | number): IReturn {\r\n        const config = Formatter.config.cel;\r\n        return this.fn(config, value);\r\n    }\r\n\r\n    /**\r\n     * Dynamically format the value.\r\n     * @param {string | number} value\r\n     * @param {IConfig} config\r\n     * @example <caption>Dynamically format.</caption>\r\n     * const formatter = new Formatter();\r\n\r\n       const config = {\r\n           length: 8,\r\n           regex: /^(\\d{5})(\\d{3})$/,\r\n           mask: '$1-$2'\r\n       }\r\n\r\n       formatter.generic(99999999, config);\r\n     * @returns {String} Return value format -> 99999-999.\r\n     */\r\n    public generic(value: string | number, config: IConfig): IReturn {\r\n        return this.fn(config, value);\r\n    }\r\n}"]}