{"version":3,"file":"checkbox.component.js","sourceRoot":"","sources":["../../../src/api/components/checkbox.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { html, css, LitElement } from 'lit';\r\nimport { customElement, property, state } from 'lit/decorators.js';\r\nimport { FIELD_MESSAGES, ITypes } from './shared/const/field.const';\r\nimport { animate } from '@lit-labs/motion';\r\n\r\n@customElement('ci-checkbox')\r\nexport class CheckboxCi extends LitElement {\r\n    private static nextId = 0;\r\n\r\n    @property() label = '';\r\n    @property() value = '';\r\n    @property() required!: boolean;\r\n\r\n    @state() id = `checkbox_${++CheckboxCi.nextId}`;\r\n    @state() errors: Array<string> = [];\r\n\r\n    static styles = css``;\r\n\r\n    createRenderRoot() { return this; }\r\n\r\n    get showFeedbackError(): string {\r\n        const ret = [];\r\n        if (this.errors.length) { ret.push(`ci-feedback--error--active`); }\r\n        return ret.join(' ');\r\n    }\r\n\r\n    private validate(value: boolean): boolean {\r\n        this.errors = [];\r\n        const data: any = {};\r\n\r\n        data.required = this.required ? !value : false;\r\n\r\n        const hasError = Object.keys(data).some(key => data[key]);\r\n\r\n        console.log('hasError', hasError)\r\n\r\n        if (hasError) {\r\n            const att = Object.keys(data).find(key => data[key]) as keyof ITypes;\r\n            this.errors.push(FIELD_MESSAGES[att]);\r\n        }\r\n\r\n        return !Boolean(this.errors.length);\r\n    }\r\n\r\n\r\n    private inputHandler(e: { target: { value: string; checked: boolean; } }) {\r\n        const target = e.target;\r\n        const value = target['value'] || '';\r\n        const checked = target['checked'];\r\n        \r\n        const isValid = this.validate(checked);\r\n\r\n        if (isValid) {\r\n            this.dispatchEvent(\r\n                new CustomEvent('ci-change', {\r\n                    detail: { value }\r\n                })\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return html`\r\n            <div class=\"ci-container-field\">\r\n                <div class=\"ci-checkbox\">\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        .id=${this.id} \r\n                        value=${this.value}\r\n                        @input=${this.inputHandler} />\r\n                    <label for=${this.id}>${this.label}</label>\r\n                </div>\r\n                <div class=\"ci-feedback ci-feedback--error ${this.showFeedbackError}\" ${animate()}>\r\n                    ${this.errors.map(e => html`<span>${e}</span>`)}\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        'ci-checkbox': CheckboxCi;\r\n    }\r\n}\r\n"]}