{"version":3,"file":"field.component.js","sourceRoot":"","sources":["../../../src/api/components/field.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { html, css, LitElement } from 'lit';\r\nimport { customElement, property, state } from 'lit/decorators.js';\r\nimport { animate } from '@lit-labs/motion';\r\nimport { Validator } from './shared/services/validator.service';\r\nimport { Formatter, IConfig } from './shared/services/formatter.service';\r\nimport { MASKS, NUMBER, NUMBER_MASK, FIELD_MESSAGES, ITypes } from './shared/const/field.const';\r\nimport IMask from 'imask';\r\n\r\nexport type IValidTypes = 'password' | 'text' | 'email' | 'cep' | 'cpf' | 'cnpj' | 'cel' | 'celWithDDD' | 'tel' | 'date';\r\nexport type IValidSize = 'big';\r\n\r\ninterface ITypeMask {\r\n    cep: IConfig;\r\n    cpf: IConfig;\r\n    cnpj: IConfig;\r\n    cel: IConfig;\r\n    celWithDDD: IConfig;\r\n}\r\n\r\n@customElement('ci-field')\r\nexport class FieldCi extends LitElement {\r\n    private static nextId = 0;\r\n\r\n    @property() label!: string;\r\n    @property() placeholder = '';\r\n    @property() value = '';\r\n    @property() icon!: string;\r\n    @property() name!: string;\r\n    @property() type!: IValidTypes;\r\n    @property() size!: IValidSize;\r\n    @property() required!: boolean;\r\n    @property() loading!: boolean;\r\n    @property() disabled!: boolean;\r\n\r\n    @state() errors: Array<string> = [];\r\n    @state() id = `field_${++FieldCi.nextId}`;\r\n    @state() typeState!: IValidTypes;\r\n\r\n    private validator = new Validator();\r\n    private eyeIcon: 'eye' | 'eye-slash' = 'eye';\r\n\r\n    static styles = css``;\r\n\r\n    createRenderRoot() { return this; }\r\n\r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        this.typeState = this.type;\r\n    }\r\n\r\n    get getType(): string {\r\n        if (['password'].includes(this.type)) { return this.type; }\r\n        if (NUMBER.includes(this.type)) { return 'tel'; }\r\n\r\n        return 'text';\r\n    }\r\n\r\n    get labelCls(): string {\r\n        const ret = [];\r\n        if (this.required) { ret.push(`ci-label--required`); }\r\n        return ret.join(' ');\r\n    }\r\n\r\n    get iconCls(): string {\r\n        const ret = [];\r\n        const icon = this.icon || this.eyeIcon;\r\n        ret.push(`uil-${icon}`);\r\n        return ret.join(' ');\r\n    }\r\n\r\n    get fieldCls(): string {\r\n        const ret = [];\r\n        if (this.errors.length) { ret.push(`ci-field--invalid`); }\r\n        if (this.disabled || this.loading) { ret.push(`ci-field--disabled`); }\r\n        if (this.size === 'big') { ret.push(`ci-field--big`); }\r\n        return ret.join(' ');\r\n    }\r\n\r\n    get showFeedbackError(): string {\r\n        const ret = [];\r\n        if (this.errors.length) { ret.push(`ci-feedback--error--active`); }\r\n        return ret.join(' ');\r\n    }\r\n\r\n    get loadingHTML() {\r\n        return this.loading ? html`\r\n            <div class=\"ci-loader-container\">\r\n                <div class=\"ci-loader\"></div>\r\n            </div>\r\n        ` : '';\r\n    }\r\n\r\n    get iconHTML() {\r\n        return ['password'].includes(this.typeState) ? html`\r\n            <div @click=${this.toggle} class=\"ci-icon ci-icon--pointer\">\r\n                <i class=\"uil ${this.iconCls}\"></i>\r\n            </div>` : '';\r\n    }\r\n\r\n    get input(): HTMLElement {\r\n        return document.getElementById(this.id) as HTMLElement;\r\n    }\r\n\r\n    private toggle() {\r\n        this.type = this.type === 'text' ? 'password' : 'text';\r\n        this.eyeIcon = this.eyeIcon === 'eye' ? 'eye-slash' : 'eye';\r\n    }\r\n\r\n    private sanitize(value: string) {\r\n        const regex = /[/A-Z!@#$%^&*()-\\.,.\\s+?\":{}|<>]/g;\r\n        return value.replace(regex, '');\r\n    }\r\n\r\n    private sanitizeNumber(value: string) {\r\n        const clean = value.replace(',', '.');\r\n        return clean;\r\n    }\r\n\r\n    private clean(value: string): string {\r\n        let clean: string = value;\r\n        if (value) {\r\n            if (this.type === 'email') { clean = value; }\r\n            if (NUMBER_MASK.includes(this.type)) { clean = this.sanitizeNumber(value); }\r\n            if (MASKS.includes(this.type)) { clean = this.sanitize(value); }\r\n        }\r\n        return clean;\r\n    }\r\n\r\n    private validate(value: string): boolean {\r\n\r\n        this.errors = [];\r\n        const data: any = {};\r\n\r\n        function isEmpty(value: string | number) {\r\n            return value === '' || value === 0 || value === undefined || value === null;\r\n        }\r\n\r\n        data.required = this.required ? isEmpty(value) : false;\r\n        data.cpf = this.type === 'cpf' ? !this.validator.isValidCpf(value) : false;\r\n        data.cnpj = this.type === 'cnpj' ? !this.validator.isValidCnpj(value) : false;\r\n        data.email = this.type === 'email' ? !this.validator.isValidEmail(value) : false;\r\n        data.tel = this.type === 'tel' ? !this.validator.isValidTel(value) : false;\r\n        data.cel = this.type === 'cel' ? !this.validator.isValidCel(value) : false;\r\n        data.password = this.type === 'password' ? !this.validator.isValidPassword(value) : false;\r\n        data.cep = this.type === 'cep' ? !this.validator.isValidCep(value) : false;\r\n\r\n        const hasError = Object.keys(data).some(key => data[key]);\r\n\r\n        if (hasError) {\r\n            const att = Object.keys(data).find(key => data[key]) as keyof ITypes;\r\n            this.errors.push(FIELD_MESSAGES[att]);\r\n        }\r\n\r\n        return !Boolean(this.errors.length);\r\n    }\r\n\r\n    private inputHandler(e: { target: { value: string } }) {\r\n        const value = e.target['value'] || '';\r\n\r\n        if (MASKS.includes(this.type)) {\r\n            const format = Formatter.config[this.type as keyof ITypeMask].example;\r\n            const options = { mask: format };\r\n            IMask(this.input, options)\r\n        }\r\n\r\n        const sanitize = this.clean(value);\r\n        const isValid = this.validate(sanitize);\r\n\r\n        if (isValid) {\r\n            this.dispatchEvent(\r\n                new CustomEvent('ci-change', {\r\n                    detail: { value }\r\n                })\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return html`\r\n            <div class=\"ci-container-field\">\r\n                <div class=\"ci-label ${this.labelCls}\">${this.label}</div>\r\n                <div class=\"ci-field ${this.fieldCls}\">\r\n                    <input\r\n                        .name=${this.name}\r\n                        .id=${this.id}\r\n                        .type=${this.getType}\r\n                        .placeholder=${this.placeholder}\r\n                        .value=${this.value}\r\n                        .disabled=${this.disabled || this.loading}\r\n                        @input=${this.inputHandler}>\r\n\r\n                    ${this.loadingHTML}\r\n                    ${this.iconHTML}\r\n                </div>\r\n                <div class=\"ci-feedback ci-feedback--error ${this.showFeedbackError}\" ${animate()}>\r\n                    ${this.errors.map(e => html`<span>${e}</span>`)}\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        'ci-field': FieldCi;\r\n    }\r\n}\r\n"]}